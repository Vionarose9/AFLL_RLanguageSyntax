
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW COLON FOR ID IN LBRACE LFLOWER NUM RBRACE RFLOWER\n    for_statement : FOR LBRACE ID IN NUM COLON NUM RBRACE LFLOWER statements RFLOWER\n      | FOR LBRACE ID IN ID RBRACE LFLOWER statements RFLOWER\n      | FOR LBRACE ID IN NUM COLON NUM RBRACE singleStatement\n      | FOR LBRACE ID IN ID RBRACE singleStatement\n    \n    statements  : statements statement\n                | statement\n    \n    statement   : list \n                | for_statement\n                | empty\n    \n    singleStatement : list\n                    | empty\n                    | for_statement\n    \n    list    : ID list\n            | ID\n            | ID ARROW NUM\n    \n    empty :\n    '
    
_lr_action_items = {'FOR':([0,8,10,11,12,13,14,15,17,19,20,21,22,23,24,25,26,27,28,29,30,31,],[2,2,-14,2,-4,-10,-11,-12,-13,2,-6,-7,-8,-9,2,-15,-2,-5,2,-3,2,-1,]),'$end':([1,8,10,12,13,14,15,17,24,25,26,29,31,],[0,-16,-14,-4,-10,-11,-12,-13,-16,-15,-2,-3,-1,]),'LBRACE':([2,],[3,]),'ID':([3,5,8,10,11,12,13,14,15,17,19,20,21,22,23,24,25,26,27,28,29,30,31,],[4,6,10,10,10,-4,-10,-11,-12,-13,10,-6,-7,-8,-9,10,-15,-2,-5,10,-3,10,-1,]),'IN':([4,],[5,]),'NUM':([5,9,18,],[7,16,25,]),'RBRACE':([6,16,],[8,24,]),'COLON':([7,],[9,]),'LFLOWER':([8,24,],[11,28,]),'RFLOWER':([8,10,11,12,13,14,15,17,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-16,-14,-16,-4,-10,-11,-12,-13,26,-6,-7,-8,-9,-16,-15,-2,-5,-16,-3,31,-1,]),'ARROW':([10,],[18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'for_statement':([0,8,11,19,24,28,30,],[1,15,22,22,15,22,22,]),'singleStatement':([8,24,],[12,29,]),'list':([8,10,11,19,24,28,30,],[13,17,21,21,13,21,21,]),'empty':([8,11,19,24,28,30,],[14,23,23,14,23,23,]),'statements':([11,28,],[19,30,]),'statement':([11,19,28,30,],[20,27,20,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> for_statement","S'",1,None,None,None),
  ('for_statement -> FOR LBRACE ID IN NUM COLON NUM RBRACE LFLOWER statements RFLOWER','for_statement',11,'p_while','for_parser.py',6),
  ('for_statement -> FOR LBRACE ID IN ID RBRACE LFLOWER statements RFLOWER','for_statement',9,'p_while','for_parser.py',7),
  ('for_statement -> FOR LBRACE ID IN NUM COLON NUM RBRACE singleStatement','for_statement',9,'p_while','for_parser.py',8),
  ('for_statement -> FOR LBRACE ID IN ID RBRACE singleStatement','for_statement',7,'p_while','for_parser.py',9),
  ('statements -> statements statement','statements',2,'p_statements','for_parser.py',27),
  ('statements -> statement','statements',1,'p_statements','for_parser.py',28),
  ('statement -> list','statement',1,'p_statement','for_parser.py',36),
  ('statement -> for_statement','statement',1,'p_statement','for_parser.py',37),
  ('statement -> empty','statement',1,'p_statement','for_parser.py',38),
  ('singleStatement -> list','singleStatement',1,'p_singleStatement','for_parser.py',42),
  ('singleStatement -> empty','singleStatement',1,'p_singleStatement','for_parser.py',43),
  ('singleStatement -> for_statement','singleStatement',1,'p_singleStatement','for_parser.py',44),
  ('list -> ID list','list',2,'p_list','for_parser.py',48),
  ('list -> ID','list',1,'p_list','for_parser.py',49),
  ('list -> ID ARROW NUM','list',3,'p_list','for_parser.py',50),
  ('empty -> <empty>','empty',0,'p_empty','for_parser.py',54),
]
